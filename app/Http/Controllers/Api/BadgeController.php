<?php

namespace App\Http\Controllers\Api;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;
use Carbon\Carbon;
use App\Models\Mood;
use App\Models\Badge;

class BadgeController extends Controller
{
    // To√†n b·ªô danh s√°ch huy hi·ªáu
    const BADGES = [
        'KIEN_TRI_3' => ['name' => 'Th·ª≠ Th√°ch 3 Ng√†y ü•â', 'description' => 'Ho√†n th√†nh 3 ng√†y li√™n ti·∫øp ghi nh·∫≠t k√Ω.', 'type' => 'streak', 'image_path' => '3day.png'],
        'KIEN_TRI_7' => ['name' => 'Ng∆∞·ªùi Ki√™n Tr√¨ 7 Ng√†y üí™', 'description' => 'Vi·∫øt nh·∫≠t k√Ω c·∫£m x√∫c 7 ng√†y li√™n ti·∫øp.', 'type' => 'streak', 'image_path' => '7day.png'],
        'KIEN_TRI_30' => ['name' => 'Nh√† C·∫£m X√∫c B·ªÅn B·ªâ üåü', 'description' => 'Vi·∫øt nh·∫≠t k√Ω c·∫£m x√∫c 30 ng√†y li√™n ti·∫øp.', 'type' => 'streak', 'image_path' => '30day.png'],

        'TICH_CUC_DE' => ['name' => 'Tia N·∫Øng S·ªõm ‚òÄÔ∏è', 'description' => 'ƒê·∫°t 70% log t√≠ch c·ª±c trong 7 ng√†y g·∫ßn nh·∫•t.', 'type' => 'condition', 'image_path' => 'sun.png'],
        'TICH_CUC_KHO' => ['name' => 'Tinh Th·∫ßn L·∫°c Quan ‚ú®', 'description' => 'Duy tr√¨ t·ª∑ l·ªá 80% log t√≠ch c·ª±c trong 30 ng√†y.', 'type' => 'condition', 'image_path' => 'lacquan30.png'],
        'TICH_CUC_CHINH' => ['name' => 'T√¢m h·ªìn t√≠ch c·ª±c üåà', 'description' => 'Chia s·∫ª c·∫£m x√∫c t√≠ch c·ª±c th∆∞·ªùng xuy√™n (tr√™n 60% t·ªïng th·ªÉ).', 'type' => 'condition', 'image_path' => 'tichcuc60%.png'],

        'COT_MOC_10' => ['name' => 'Ng∆∞·ªùi Ghi Ch√©p T·∫≠p S·ª±', 'description' => 'Ho√†n th√†nh 10 l·∫ßn ghi nh·∫≠t k√Ω ƒë·∫ßu ti√™n', 'type' => 'permanent', 'image_path' => 'vuotkho.png'],
        'COT_MOC_100' => ['name' => 'Nh√† S·ª≠ H·ªçc C·∫£m X√∫c', 'description' => 'Ho√†n th√†nh 100 l·∫ßn ghi nh·∫≠t k√Ω.', 'type' => 'permanent', 'image_path' => 'moc100.png'],
        'VUOT_KHO_5' => ['name' => 'B·∫≠c Th·∫ßy V∆∞·ª£t Kh√≥ üèÜ', 'description' => 'Ghi nh·∫≠n ƒë∆∞·ª£c s·ª± c·∫£i thi·ªán sau giai ƒëo·∫°n c·∫£m x√∫c ti√™u c·ª±c k√©o d√†i.', 'type' => 'permanent', 'image_path' => 'vuotkho.png'],

        'NHAT_KY_CHAM_CHI' => ['name' => 'Nh·∫≠t K√Ω ChƒÉm Ch·ªâ ‚úçÔ∏è', 'description' => 'Ghi l·∫°i 3 c·∫£m x√∫c trong c√πng m·ªôt ng√†y.','type' => 'permanent', 'image_path' => 'chamchi.png'],
    ];

    //ktra c·∫•p v√† thu h·ªìi hh
    public function checkBadges(Request $request)
    {
        $user = Auth::user();
        if (!$user) {
            return response()->json(['message' => 'Unauthorized'], 401);
        }
        $newBadge = $this->checkAllBadgeConditions($user);
        // L·∫•y ds hh c·∫ßn b·ªã thu h·ªìi
        $revokedBadgeNames = $this->getRevokedBadgeNames($user);
        
        $userBadges = $user->badges()->get(); 
        
        $finalBadges = $userBadges->filter(function($badge) use ($revokedBadgeNames) {
            // Ch·ªâ gi·ªØ l·∫°i nh·ªØng huy hi·ªáu KH√îNG b·ªã thu h·ªìi
            return !in_array($badge->badge_name, $revokedBadgeNames);
        })->values()->map(function($badge) {

            $badgeInfo = collect(self::BADGES)->first(function ($info) use ($badge) {
                return $info['name'] === $badge->badge_name;
            });
            // T·∫°o URL m·∫°ng
            $imagePath = $badgeInfo['image_path'] ?? 'default.png';
            $imageUrl = asset('images/badges/' . $imagePath);

             return [
                 'badge_name' => $badge->badge_name,
                 'description' => $badge->description,
                 'ai_quote' => $badge->ai_quote,
                 'earned_date' => $badge->earned_date,
                 'image_url' => $imageUrl,
             ];
        })->toArray();
        
        return response()->json([
            'badges' => $finalBadges, // Danh s√°ch huy hi·ªáu ƒê√É L·ªåC
            'new_badge' => $newBadge, // Th√¥ng tin huy hi·ªáu m·ªõi (n·∫øu c√≥)
            'revoked_badge_names' => $revokedBadgeNames // Danh s√°ch t√™n huy hi·ªáu c·∫ßn th√¥ng b√°o thu h·ªìi
        ]);
    }

    //API: X√≥a huy hi·ªáu kh·ªèi DB sau khi Flutter th√¥ng b√°o cho ng∆∞·ªùi d√πng
    public function revokeBadge(Request $request)
    {
        $user = $request->user();
        $badgeName = $request->input('badge_name');

        if (!$user || !$badgeName) {
            return response()->json(['success' => false, 'message' => 'Invalid request'], 400);
        }

        $badge = Badge::where('user_id', $user->id)
            ->where('badge_name', $badgeName)
            ->first();

        if ($badge) {
            $badge->delete();
            return response()->json(['success' => true, 'message' => "Huy hi·ªáu '{$badgeName}' ƒë√£ ƒë∆∞·ª£c thu h·ªìi."], 200);
        }

        return response()->json(['success' => false, 'message' => "Huy hi·ªáu '{$badgeName}' kh√¥ng t·ªìn t·∫°i."], 404);
    }
    
    //API l·∫•y huy hi·ªáu user hi·ªán t·∫°i
    public function me(Request $request)
    {
        $user = $request->user();
        if (!$user) {
            return response()->json(['success' => false, 'message' => 'Token kh√¥ng h·ª£p l·ªá'], 401);
        }

        $badges = Badge::where('user_id', $user->id)
            ->orderBy('earned_date', 'desc')
            ->get();

        return response()->json(['success' => true, 'badges' => $badges]);
    }

    //L·∫•y danh s√°ch t√™n huy hi·ªáu c·∫ßn b·ªã thu h·ªìi
    private function getRevokedBadgeNames($user)
    {
        $revokedNames = [];
        
        // 1. Ki·ªÉm tra Thu h·ªìi Streak
        $streakRevoked = $this->checkStreakRevocation($user);
        if (!empty($streakRevoked)) {
            $revokedNames = array_merge($revokedNames, $streakRevoked);
        }

        // 2. Ki·ªÉm tra Thu h·ªìi T·ª∑ l·ªá/ƒêi·ªÅu ki·ªán kh√°c
        $conditionRevoked = $this->checkConditionRevocation($user);
        if (!empty($conditionRevoked)) {
            $revokedNames = array_merge($revokedNames, $conditionRevoked);
        }

        return array_unique($revokedNames);
    }

    // Ki·ªÉm tra v√† l·∫•y danh s√°ch t√™n huy hi·ªáu STREAK c·∫ßn thu h·ªìi
    private function checkStreakRevocation($user)
    {
        // T√≠nh to√°n Streak hi·ªán t·∫°i
        $currentStreak = $this->getStreak($user); 
        $revokedNames = [];

        // L·∫•y danh s√°ch t√™n huy hi·ªáu Streak c·∫ßn ki·ªÉm tra
        $streakBadgeNames = [
            self::BADGES['KIEN_TRI_3']['name'],
            self::BADGES['KIEN_TRI_7']['name'],
            self::BADGES['KIEN_TRI_30']['name'],
        ];

        // L·∫•y t·∫•t c·∫£ huy hi·ªáu streak m√† ng∆∞·ªùi d√πng ƒëang c√≥
        $userStreakBadges = Badge::where('user_id', $user->id)
            ->whereIn('badge_name', $streakBadgeNames)
            ->get();
            
        foreach ($userStreakBadges as $badge) {
            // L·∫•y y√™u c·∫ßu streak t·ª´ t√™n (v√≠ d·ª•: 'Th·ª≠ Th√°ch 3 Ng√†y ü•â' -> 3)
            $requiredStreak = (int) filter_var($badge->badge_name, FILTER_SANITIZE_NUMBER_INT);
            //N·∫øu ng∆∞·ªùi d√πng c√≥ huy hi·ªáu 7 ng√†y (requiredStreak = 7) v√† $currentStreak = 3, huy hi·ªáu s·∫Ω b·ªã thu h·ªìi. N·∫øu ng∆∞·ªùi d√πng c√≥ huy hi·ªáu 3 ng√†y (requiredStreak = 3) v√† $currentStreak = 3, huy hi·ªáu s·∫Ω ƒë∆∞·ª£c gi·ªØ l·∫°i.
            if ($currentStreak < $requiredStreak) {
                $revokedNames[] = $badge->badge_name;
            }
        }
        
        return $revokedNames;
    }

    //Ki·ªÉm tra v√† l·∫•y danh s√°ch t√™n huy hi·ªáu CONDITION c·∫ßn thu h·ªìi
    private function checkConditionRevocation($user)
    {
        $revokedNames = [];
        $moods = Mood::where('user_id', $user->id)->get();
        $totalLogs = $moods->count();
        if ($totalLogs == 0) return [];

        $positive = ['vui', 'h·∫°nh ph√∫c', 't√≠ch c·ª±c', 'r·∫•t t√≠ch c·ª±c', 'ƒëang y√™u', 'happy'];
        $positiveCount = $moods->filter(fn($m) => in_array(strtolower($m->emotion ?? ''), $positive))->count();
        $ratio = $totalLogs ? $positiveCount / $totalLogs : 0;

        // TICH_CUC_CHINH (T·ª∑ l·ªá t·ªïng th·ªÉ < 60%)
        if ($ratio < 0.6) {
            $this->markBadgeForRevocation($user, self::BADGES['TICH_CUC_CHINH']['name'], $revokedNames);
        }

        // TICH_CUC_DE (7 ng√†y g·∫ßn nh·∫•t < 70%)
        $recent7 = $moods->where('created_at', '>=', Carbon::now()->subDays(7));
        if ($recent7->count() >= 5) {
            $ratio7 = $recent7->filter(fn($m) => in_array(strtolower($m->emotion ?? ''), $positive))->count() / $recent7->count();
            if ($ratio7 < 0.7) {
                $this->markBadgeForRevocation($user, self::BADGES['TICH_CUC_DE']['name'], $revokedNames);
            }
        }

        // TICH_CUC_KHO (30 ng√†y g·∫ßn nh·∫•t < 80%)
        $recent30 = $moods->where('created_at', '>=', Carbon::now()->subDays(30));
        if ($recent30->count() >= 10) {
            $ratio30 = $recent30->filter(fn($m) => in_array(strtolower($m->emotion ?? ''), $positive))->count() / $recent30->count();
            if ($ratio30 < 0.8) {
                $this->markBadgeForRevocation($user, self::BADGES['TICH_CUC_KHO']['name'], $revokedNames);
            }
        }

        return $revokedNames;
    }

    //Ch·ªâ ƒë√°nh d·∫•u t√™n huy hi·ªáu c·∫ßn b·ªã thu h·ªìi n·∫øu ng∆∞·ªùi d√πng ƒëang s·ªü h·ªØu
    private function markBadgeForRevocation($user, $badgeName, &$revokedNames)
    {
        $exists = Badge::where('user_id', $user->id)
            ->where('badge_name', $badgeName)
            ->exists();

        if ($exists) {
            $revokedNames[] = $badgeName;
        }
    }

    //Ki·ªÉm tra t·∫•t c·∫£ ƒëi·ªÅu ki·ªán v√† c·∫•p huy hi·ªáu
    private function checkAllBadgeConditions($user)
    {
        $newBadge = null;
        $moods = Mood::where('user_id', $user->id)->get();
        $totalLogs = $moods->count();
        if ($totalLogs == 0) return null;

        // Ki·ªÉm tra streak
        $streak = $this->getStreak($user);
        if ($streak >= 3) $newBadge = $this->awardBadge($user, self::BADGES['KIEN_TRI_3']);
        if ($streak >= 7) $newBadge = $this->awardBadge($user, self::BADGES['KIEN_TRI_7']);
        if ($streak >= 30) $newBadge = $this->awardBadge($user, self::BADGES['KIEN_TRI_30']);

        // C·ªôt m·ªëc t·ªïng log
        if ($totalLogs >= 10) $newBadge = $this->awardBadge($user, self::BADGES['COT_MOC_10']);
        if ($totalLogs >= 100) $newBadge = $this->awardBadge($user, self::BADGES['COT_MOC_100']);

        // Vi·∫øt 3 c·∫£m x√∫c trong c√πng 1 ng√†y
        $logsByDay = $moods->groupBy(fn($m) => Carbon::parse($m->date ?? $m->created_at)->toDateString());
        foreach ($logsByDay as $day => $logs) {
            if ($logs->count() >= 3) {
                $newBadge = $this->awardBadge($user, self::BADGES['NHAT_KY_CHAM_CHI']);
                break;
            }
        }
        // T√≠ch c·ª±c
        $positive = ['vui', 'h·∫°nh ph√∫c', 't√≠ch c·ª±c', 'r·∫•t t√≠ch c·ª±c', 'ƒëang y√™u', 'happy'];
        $positiveCount = $moods->filter(fn($m) => in_array(strtolower($m->emotion ?? ''), $positive))->count();
        $ratio = $totalLogs ? $positiveCount / $totalLogs : 0;
        // TICH_CUC_CHINH (Tr√™n 60% t·ªïng th·ªÉ)
        if ($ratio >= 0.6) $newBadge = $this->awardBadge($user, self::BADGES['TICH_CUC_CHINH']);
        // TICH_CUC_DE (7 ng√†y g·∫ßn nh·∫•t)
        $recent7 = $moods->where('created_at', '>=', Carbon::now()->subDays(7));
        if ($recent7->count() >= 5) {
            $ratio7 = $recent7->filter(fn($m) => in_array(strtolower($m->emotion ?? ''), $positive))->count() / $recent7->count();
            if ($ratio7 >= 0.7) $newBadge = $this->awardBadge($user, self::BADGES['TICH_CUC_DE']);
        }
        // TICH_CUC_KHO (30 ng√†y g·∫ßn nh·∫•t)
        $recent30 = $moods->where('created_at', '>=', Carbon::now()->subDays(30));
        if ($recent30->count() >= 10) {
            $ratio30 = $recent30->filter(fn($m) => in_array(strtolower($m->emotion ?? ''), $positive))->count() / $recent30->count();
            if ($ratio30 >= 0.8) $newBadge = $this->awardBadge($user, self::BADGES['TICH_CUC_KHO']);
        }
        //V∆∞·ª£t kh√≥
        $badLevels = ['r·∫•t t·ªá', 't·ªìi t·ªá', 'bu·ªìn b√£'];
        $history = $moods->pluck('emotion')->map(fn($e) => strtolower($e ?? ''));
        $badStreak = 0; $overcome = false;
        
        foreach ($history as $e) {
            if (in_array($e, $badLevels)) $badStreak++;
            else $badStreak = 0;
            if ($badStreak >= 5) $overcome = true; 
        }
        if ($overcome && $positiveCount >= 10)
            $newBadge = $this->awardBadge($user, self::BADGES['VUOT_KHO_5']);
        return $newBadge;
    }

    //T√≠nh to√°n Streak
    private function getStreak($user)
    {
        $dates = Mood::where('user_id', $user->id)
            ->orderBy('date', 'desc')
            ->pluck('date')
            ->filter()
            ->map(fn($d) => Carbon::parse($d)->startOfDay())
            ->unique()
            ->values();

        if ($dates->isEmpty()) return 0;

        $streak = 1;
        
        $latestLogDate = $dates->first();
        $today = Carbon::now('Asia/Ho_Chi_Minh')->startOfDay();
        $yesterday = Carbon::yesterday('Asia/Ho_Chi_Minh')->startOfDay();
        
        // N·∫øu log g·∫ßn nh·∫•t kh√¥ng ph·∫£i h√¥m nay v√† kh√¥ng ph·∫£i h√¥m qua, streak l√† 0
        if (!$latestLogDate->equalTo($today) && !$latestLogDate->equalTo($yesterday)) {
            return 0;
        }

        for ($i = 1; $i < count($dates); $i++) {
            if ($dates[$i - 1]->diffInDays($dates[$i]) == 1) {
                $streak++;
            } else {
                break; // ƒê·ª©t chu·ªói
            }
        }
        return $streak;
    }

    //Trao huy hi·ªáu & AI
    private function awardBadge($user, $badge)
    {
        $imagePath = $badge['image_path'] ?? 'default.png';
        $imageUrl = asset('images/badges/' . $imagePath);

        //T√¨m ki·∫øm huy hi·ªáu hi·ªán c√≥
        $existingBadge = Badge::where('user_id', $user->id)
            ->where('badge_name', $badge['name'])
            ->first();

        //N·∫øu hh ƒë√£ t·ªìn t·∫°i
        if ($existingBadge) {
            if ($badge['type'] === 'permanent') {
                return null; // Gi·ªØ nguy√™n ng√†y ƒë·∫°t ƒë∆∞·ª£c ban ƒë·∫ßu
            }
            
            if (!Carbon::parse($existingBadge->earned_date)->isToday()) {
                $existingBadge->update(['earned_date' => Carbon::now()]);
            }
            
            // Tr·∫£ null v√¨ KH√îNG ph·∫£i huy hi·ªáu m·ªõi
            return null; 
        }

        // N·∫øu huy hi·ªáu CH∆ØA t·ªìn t·∫°i, ti·∫øn h√†nh c·∫•p m·ªõi
        $aiQuote = $this->generateAIQuote($badge['name'], $badge['description']);

        $new = Badge::create([
            'user_id' => $user->id,
            'badge_name' => $badge['name'],
            'description' => $badge['description'],
            'ai_quote' => $aiQuote,
            'earned_date' => Carbon::now(),
            'image_url' => $imageUrl,
        ]);

        return $new->toArray();
    }

    private function generateAIQuote($badgeName, $description)
    {
        $apiKey = config('services.gemini.api_key');
        $fallback = 'M·ªôt c·ªôt m·ªëc c·∫£m x√∫c ƒë√°ng nh·ªõ! üåà';

        if (!$apiKey) return $fallback;

        try {
            $prompt = "Ng∆∞·ªùi d√πng v·ª´a ƒë·∫°t huy hi·ªáu '{$badgeName}' v·ªõi th√†nh t√≠ch '{$description}'.
            Vi·∫øt m·ªôt c√¢u kh√¥ng qu√° d√†i truy·ªÅn s·ª± c·∫£m h·ª©ng v√† t√≠ch c·ª±c, c√≥ th·ªÉ d√πng emotion ho·∫∑c c√¢u th∆° ƒëo·∫°n vƒÉn hay v√†o.
            M·ªói l·∫ßn h√£y vi·∫øt m·ªôt c√°ch di·ªÖn ƒë·∫°t kh√°c m·ªôt ch√∫t ƒë·ªÉ t·∫°o c·∫£m gi√°c t·ª± nhi√™n. Kh√¥ng s·ª≠ d·ª•ng d·∫•u ngo·∫∑c k√©p.";

            $response = Http::withHeaders(['Content-Type' => 'application/json'])
                ->post("https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key={$apiKey}", [
                    "contents" => [[
                        "role" => "user",
                        "parts" => [["text" => $prompt]]
                    ]],
                    "generationConfig" => [
                        "maxOutputTokens" => 50,
                        "temperature" => 0.8
                    ]
                ]);

            if ($response->successful()) {
                $data = $response->json();
                return trim($data['candidates'][0]['content']['parts'][0]['text'] ?? $fallback, "\"\n ");
            }
        } catch (\Throwable $e) {
            Log::error('AI Quote Error: ' . $e->getMessage());
        }

        return $fallback;
    }
}