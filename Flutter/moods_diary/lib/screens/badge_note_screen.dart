import 'package:flutter/material.dart';
import 'package:moods_diary/widgets/auto_text.dart';

class BadgeModel {
  final String key;
  final String name;
  final String description;
  final String imageAsset;
  final String type;

  BadgeModel({
    required this.key,
    required this.name,
    required this.description,
    required this.imageAsset,
    required this.type,
  });
}

//p/kh·ªõp v·ªõi khai b√°o const BADGES trong Laravel
final List<BadgeModel> allBadges = [
  BadgeModel(
    key: 'KIEN_TRI_3',
    name: 'Th·ª≠ Th√°ch 3 Ng√†y ü•â',
    description: 'Ho√†n th√†nh 3 ng√†y li√™n ti·∫øp ghi nh·∫≠t k√Ω.',
    imageAsset: 'assets/images/3day.png',
    type: 'streak',
  ),
  BadgeModel(
    key: 'KIEN_TRI_7',
    name: 'Ng∆∞·ªùi Ki√™n Tr√¨ 7 Ng√†y üí™',
    description: 'Vi·∫øt nh·∫≠t k√Ω c·∫£m x√∫c 7 ng√†y li√™n ti·∫øp.',
    imageAsset: 'assets/images/7day.png',
    type: 'streak',
  ),
  BadgeModel( 
    key: 'KIEN_TRI_30',
    name: 'Nh√† C·∫£m X√∫c B·ªÅn B·ªâ üåü',
    description: 'Vi·∫øt nh·∫≠t k√Ω c·∫£m x√∫c 30 ng√†y li√™n ti·∫øp.',
    imageAsset: 'assets/images/30day.png',
    type: 'streak',
  ),
  BadgeModel(
    key: 'TICH_CUC_DE',
    name: 'Tia N·∫Øng S·ªõm ‚òÄÔ∏è',
    description: 'ƒê·∫°t 70% log t√≠ch c·ª±c trong 7 ng√†y g·∫ßn nh·∫•t.',
    imageAsset: 'assets/images/sun.png',
    type: 'condition',
  ),
  BadgeModel(
    key: 'TICH_CUC_KHO',
    name: 'Tinh Th·∫ßn L·∫°c Quan ‚ú®',
    description: 'Duy tr√¨ t·ª∑ l·ªá 80% log t√≠ch c·ª±c trong 30 ng√†y.',
    imageAsset: 'assets/images/lacquan30.png',
    type: 'condition',
  ),
  BadgeModel(
    key: 'TICH_CUC_CHINH',
    name: 'T√¢m h·ªìn t√≠ch c·ª±c üåà',
    description: 'Chia s·∫ª c·∫£m x√∫c t√≠ch c·ª±c th∆∞·ªùng xuy√™n (tr√™n 60% t·ªïng th·ªÉ).',
    imageAsset: 'assets/images/tichcuc60%.png',
    type: 'condition',
  ),
  BadgeModel(
    key: 'COT_MOC_10',
    name: 'Ng∆∞·ªùi Ghi Ch√©p T·∫≠p S·ª±',
    description: 'Ho√†n th√†nh 10 l·∫ßn ghi nh·∫≠t k√Ω ƒë·∫ßu ti√™n.',
    imageAsset: 'assets/images/vuotkho.png',
    type: 'permanent',
  ),
  BadgeModel(
    key: 'COT_MOC_100',
    name: 'Nh√† S·ª≠ H·ªçc C·∫£m X√∫c',
    description: 'Ho√†n th√†nh 100 l·∫ßn ghi nh·∫≠t k√Ω.',
    imageAsset: 'assets/images/moc100.png',
    type: 'permanent',
  ),
  BadgeModel(
    key: 'VUOT_KHO_5',
    name: 'B·∫≠c Th·∫ßy V∆∞·ª£t Kh√≥ üèÜ',
    description: 'Ghi nh·∫≠n ƒë∆∞·ª£c s·ª± c·∫£i thi·ªán sau giai ƒëo·∫°n c·∫£m x√∫c ti√™u c·ª±c k√©o d√†i.',
    imageAsset: 'assets/images/vuotkho.png',
    type: 'permanent',
  ),
  BadgeModel(
    key: 'NHAT_KY_CHAM_CHI',
    name: 'Nh·∫≠t K√Ω ChƒÉm Ch·ªâ ‚úçÔ∏è',
    description: 'Ghi l·∫°i 3 c·∫£m x√∫c trong c√πng m·ªôt ng√†y.',
    imageAsset: 'assets/images/chamchi.png',
    type: 'permanent',
  ),
];
//screen hh
class BadgeNoteScreen extends StatelessWidget {
  const BadgeNoteScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('B·∫£ng Ghi Ch√∫ Huy Hi·ªáu'),
        backgroundColor: Colors.pink.shade100,
        foregroundColor: const Color.fromARGB(255, 0, 0, 0), //icon quay l·∫°i
      ),
      body: ListView.builder(
        padding: const EdgeInsets.all(16.0),
        itemCount: allBadges.length,
        itemBuilder: (context, index) {
          final badge = allBadges[index];
          return Padding(
            padding: const EdgeInsets.only(bottom: 20.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    SizedBox(
                      width: 80,
                      height: 80,
                      child: Image.asset(
                        badge.imageAsset,
                        errorBuilder: (context, error, stackTrace) {
                          return const Icon(Icons.error_outline, size: 40, color: Colors.grey);
                        },
                      ),
                    ),
                    const SizedBox(width: 15),

                    Expanded(
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          AutoText(
                            badge.name,
                            style: const TextStyle(
                              fontSize: 22,
                              fontWeight: FontWeight.bold,
                              color: Colors.black87,
                            ),
                          ),
                          const SizedBox(height: 4),
                          AutoText(
                            badge.description,
                            style: const TextStyle(
                              fontSize: 15,
                              color: Colors.black54,
                              fontStyle: FontStyle.italic,
                            ),
                          ),
                        ],
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 10),
                //c√°ch d√≤ng
                Container( 
                  height: 1,
                  margin: const EdgeInsets.only(right: 10),
                  color: Colors.pink.withOpacity(0.2),
                ),
              ],
            ),
          );
        },
      ),
    );
  }
}