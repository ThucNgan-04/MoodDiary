import 'package:http/http.dart' as http;
import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:moods_diary/utils/constants.dart';
import 'package:moods_diary/widgets/auto_text.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../utils/date_ultils.dart'; 

// WIDGET 1: ThongKeWeeklySummary
class ThongKeWeeklySummary extends StatelessWidget {
  final WeeklyData weeklyData;
  final Map<String, dynamic> weekMoods; 
  final List<Map<String, dynamic>> allWeeklyMoodEntries; 
  
  final List<Map<String, dynamic>> allPreviousWeeklyMoodEntries; 
  
  final Function(String) isPositiveMood;
  final int negToPosCount;
  final int posToNegCount;

  final List<WeeklyData>? allWeeks;
  final Map<int, Map<String, dynamic>>? allWeekMoods; 

  const ThongKeWeeklySummary({
    super.key,
    required this.weeklyData,
    required this.weekMoods,
    required this.allWeeklyMoodEntries, 
    required this.allPreviousWeeklyMoodEntries, 
    required this.isPositiveMood,
    required this.negToPosCount,
    required this.posToNegCount,
    this.allWeeks,
    this.allWeekMoods,
  });
  static const Set<String> negativeMoods = {'bu·ªìn', 'gi·∫≠n d·ªØ'};

  // -------------------- PH√ÇN T√çCH T·∫§T C·∫¢ B·∫¢N GHI TRONG TU·∫¶N HI·ªÜN T·∫†I --------------------
  Map<String, int> _analyzeWeek({required List<Map<String, dynamic>> entries}) {
    int posCount = 0;
    int negCount = 0;
    int neuCount = 0; 
    int totalCount = entries.length; 
    
    for (final entry in entries) {
      final emotionRaw = entry['emotion']; 
      final String? emotion = emotionRaw is String ? emotionRaw.toLowerCase() : null;

      if (emotion != null ) {
        if (isPositiveMood(emotion)) {
          posCount++;
        } else if (negativeMoods.contains(emotion)){ 
          negCount++;
        } else {
          neuCount++; 
        }
      }
    }
    final calculatedTotal = posCount + negCount + neuCount;
    return {'pos': posCount, 'neg': negCount, 'neu': neuCount, 'totalEntries': totalCount};
  }

  // -------------------- H√ÄM SO S√ÅNH --------------------
  // L·∫•y k·∫øt qu·∫£ ph√¢n t√≠ch tu·∫ßn tr∆∞·ªõc
  Map<String, int> _analyzePreviousWeek() {
      return _analyzeWeek(entries: allPreviousWeeklyMoodEntries);
  }

  Map<String, int> _compareWithPreviousWeek(Map<String, int> currStats, Map<String, int> prevStats) {
    return {
      'posDiff': currStats['pos']! - prevStats['pos']!,
      'negDiff': currStats['neg']! - prevStats['neg']!,
      'neuDiff': currStats['neu']! - prevStats['neu']!,
    };
  }
  
  // -------------------- C√ÅC H√ÄM X√ÇY D·ª∞NG UI --------------------
  Widget _buildComparisonRow(String label, int diff, {String unit = 'l·∫ßn'}) {
    String text;
    Color color;
    if (diff > 0) {
      text = "TƒÉng $diff $unit";
      color = Colors.green.shade600;
    } else if (diff < 0) {
      text = "Gi·∫£m ${diff.abs()} $unit";
      color = Colors.red.shade600;
    } else {
      text = "Kh√¥ng ƒë·ªïi";
      color = Colors.grey.shade600;
    }

    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 2),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          AutoText(label, style: const TextStyle(fontSize: 15, fontWeight: FontWeight.w500)),
          AutoText(text, style: TextStyle(fontSize: 15, color: color, fontWeight: FontWeight.bold)),
        ],
      ),
    );
  }

  Widget _buildHeaderCell(String text, {double flex = 1}) {
    return Container(
      padding: const EdgeInsets.symmetric(vertical: 12.0, horizontal: 4.0),
      alignment: Alignment.center,
      decoration: BoxDecoration(
        color: Colors.pink.shade50,
        border: Border.all(color: Colors.pink.shade100),
      ),
      child: AutoText(
        text,
        textAlign: TextAlign.center,
        style: TextStyle(
          fontWeight: FontWeight.bold,
          fontSize: 14,
          color: Colors.pink.shade800,
        ),
      ),
    );
  }

  Widget _buildDataCell(String text, {Color? color, bool isBold = false}) {
    return Container(
      padding: const EdgeInsets.symmetric(vertical: 10.0, horizontal: 4.0),
      alignment: Alignment.center,
      decoration: BoxDecoration(
        border: Border.all(color: Colors.grey.shade300),
      ),
      child: AutoText(
        text,
        textAlign: TextAlign.center,
        style: TextStyle(
          fontSize: 16,
          color: color ?? Colors.black87,
          fontWeight: isBold ? FontWeight.bold : FontWeight.normal,
        ),
      ),
    );
  }

  Widget _buildMoodBar(String label, int count, int total, Color color) {
    double percent = total > 0 ? count / total : 0;
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 4.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          AutoText(
            '$label: $count l·∫ßn ghi nh·∫≠n (${(percent * 100).toStringAsFixed(0)}%)', 
            style: TextStyle(fontSize: 14, fontWeight: FontWeight.w500, color: color),
          ),
          const SizedBox(height: 4),
          LinearProgressIndicator(
            value: percent,
            backgroundColor: Colors.grey.shade200,
            color: color,
            minHeight: 8,
          ),
        ],
      ),
    );
  }

  // -------------------- BUILD --------------------
  @override
  Widget build(BuildContext context) {
    // Ph√¢n t√≠ch tu·∫ßn hi·ªán t·∫°i
    final currStats = _analyzeWeek(entries: allWeeklyMoodEntries);
    final pos = currStats['pos']!;
    final neg = currStats['neg']!;
    final neu = currStats['neu']!;
    final total = currStats['totalEntries']!; 

    // Ph√¢n t√≠ch tu·∫ßn tr∆∞·ªõc 
    final prevStats = _analyzePreviousWeek();
    final prevTotal = prevStats['totalEntries']!;
    
    // SO S√ÅNH
    Map<String, int>? diff;
    if (prevTotal > 0) {
      diff = _compareWithPreviousWeek(currStats, prevStats);
    }
    
    return Container(
      width: 600,
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(color: Colors.grey.withOpacity(0.1), blurRadius: 10, offset: const Offset(0, 4))
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          AutoText(
            "T√≥m t·∫Øt Tu·∫ßn ${weeklyData.weekNumber} (${weeklyData.dateRange})",
            style: const TextStyle(
              fontSize: 18,
              fontWeight: FontWeight.bold,
              color: Color.fromARGB(255, 114, 53, 102),
            ),
          ),
          AutoText(
            "(D·ª±a tr√™n $total l·∫ßn ghi nh·∫≠n)",
            style: TextStyle(fontSize: 14, color: Colors.grey.shade600),
          ),
          const Divider(height: 20, color: Colors.grey),

          // B·∫£ng chi ti·∫øt
          Table(
            columnWidths: const {
              0: FlexColumnWidth(1.5),
              1: FlexColumnWidth(1),
            },
            defaultVerticalAlignment: TableCellVerticalAlignment.middle,
            children: [
              // H√†ng Ti√™u ƒë·ªÅ
              TableRow(
                children: [
                  _buildHeaderCell("T√¢m tr·∫°ng", flex: 1.5),
                  _buildHeaderCell("S·ªë Emotion"),
                ],
              ),
              // H√†ng D·ªØ li·ªáu T√≠ch c·ª±c
              TableRow(
                children: [
                  _buildDataCell("T√≠ch c·ª±c (Pos) üåü", isBold: true),
                  _buildDataCell("$pos", color: Colors.green.shade600, isBold: true),
                ],
              ),
              // H√†ng D·ªØ li·ªáu Ti√™u c·ª±c
              TableRow(
                children: [
                  _buildDataCell("Ti√™u c·ª±c (Neg) ‚ö†Ô∏è", isBold: true),
                  _buildDataCell("$neg", color: Colors.red.shade600, isBold: true),
                ],
              ),
              // H√†ng D·ªØ li·ªáu Trung l·∫≠p
              TableRow(
                children: [
                  _buildDataCell("Ng√†y ch∆∞a ghi üòê", isBold: true), 
                  _buildDataCell("$neu", color: Colors.grey.shade600, isBold: true),
                ],
              ),
              // H√†ng T·ªïng c·ªông
              TableRow(
                children: [
                  _buildHeaderCell("T·ªîNG EMOTION", flex: 1.5),
                  _buildHeaderCell("$total"),
                ],
              ),
            ],
          ),
          const SizedBox(height: 20),

          AutoText(
            "Ph√¢n b·ªë C·∫£m x√∫c:",
            style: TextStyle(
              fontSize: 16,
              fontWeight: FontWeight.bold,
              color: Colors.grey.shade700,
            ),
          ),
          const SizedBox(height: 8),

          // Thanh ti·∫øn tr√¨nh
          _buildMoodBar("T√≠ch c·ª±c", pos, total, Colors.green),
          _buildMoodBar("Ti√™u c·ª±c", neg, total, Colors.red),
          _buildMoodBar("Ng√†y ch∆∞a ghi", neu, total, Colors.blueGrey),

          if (prevTotal > 0 && diff != null) ...[
            const SizedBox(height: 24),
            AutoText(
              "So s√°nh (theo S·ªê L·∫¶N GHI NH·∫¨N) v·ªõi Tu·∫ßn tr∆∞·ªõc:",
              style: TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.bold,
                color: Colors.pink.shade800,
              ),
            ),
            AutoText(
               "(Tu·∫ßn tr∆∞·ªõc c√≥ $prevTotal l·∫ßn ghi nh·∫≠n)",
               style: TextStyle(fontSize: 14, color: Colors.grey.shade600),
            ),
            const SizedBox(height: 8),
            _buildComparisonRow("T√≠ch c·ª±c üåü", diff['posDiff']!, unit: 'l·∫ßn'),
            _buildComparisonRow("Ti√™u c·ª±c ‚ö†Ô∏è", diff['negDiff']!, unit: 'l·∫ßn'),
            _buildComparisonRow("Kh√°c üòê", diff['neuDiff']!, unit: 'l·∫ßn'),
            const SizedBox(height: 20),
            
            // PH√ÇN T√çCH AI 
            ThongKeWeeklyAIAnalysis(
              currStats: currStats, 
              prevStats: prevStats, 
              currDateRange: weeklyData.dateRange,
              prevDateRange: allWeeks != null && weeklyData.weekNumber > 1 
                  ? allWeeks!.firstWhere((w) => w.weekNumber == weeklyData.weekNumber - 1).dateRange
                  : "Tu·∫ßn tr∆∞·ªõc", 
            ),
          ],
        ],
      ),
    );
  }
}
//--------------H√ÄM HTHI PH√ÇN T√çCH AI----------------
class ThongKeWeeklyAIAnalysis extends StatefulWidget {
  final Map<String, int> currStats; 
  final Map<String, int> prevStats;
  final String currDateRange;
  final String prevDateRange;

  const ThongKeWeeklyAIAnalysis({
    super.key,
    required this.currStats,
    required this.prevStats,
    required this.currDateRange,
    required this.prevDateRange,
  });

  @override
  State<ThongKeWeeklyAIAnalysis> createState() => _ThongKeWeeklyAIAnalysisState();
}

class _ThongKeWeeklyAIAnalysisState extends State<ThongKeWeeklyAIAnalysis> {
  String aiAnalysis = "B·∫•m v√†o n√∫t b√™n d∆∞·ªõi ƒë·ªÉ Mood Diary ph√¢n t√≠ch chuy√™n s√¢u.";
  bool isLoading = false;
  final String apiEndpoint = "${Constants.baseUrl}/ai/mood-shift-analysis"; 
  final String tokenKey = Constants.tokenKey;

  Future<void> _fetchAIAnalysis() async {
    if (isLoading) return;
    setState(() {
      isLoading = true;
      aiAnalysis = "Mood Diary ƒëang ph√¢n t√≠ch d·ªØ li·ªáu tu·∫ßn n√†y...";
    });
    final payload = {// Chu·∫©n b·ªã payload
      'curr_stats': widget.currStats, 
      'prev_stats': widget.prevStats,
      'curr_date_range': widget.currDateRange,
      'prev_date_range': widget.prevDateRange,
    };
    final prefs = await SharedPreferences.getInstance();// L·∫•y token
    final token = prefs.getString(tokenKey);
    if (token == null) {
        setState(() {
            aiAnalysis = "L·ªói: Kh√¥ng t√¨m th·∫•y Token ng∆∞·ªùi d√πng.";
            isLoading = false;
        });
        return;
    }
    try {
        final response = await http.post(
            Uri.parse(apiEndpoint), 
            headers: {
                'Content-Type': 'application/json',
                'Authorization': 'Bearer $token',
            },
            body: json.encode(payload),
        );
        final data = json.decode(utf8.decode(response.bodyBytes));  
        if (response.statusCode == 429) {
             setState(() {
                 aiAnalysis = data['analysis'] ?? 'AI ƒëang t·∫°m ngh·ªâ ƒë·ªÉ n·∫°p nƒÉng l∆∞·ª£ng üòÖ. H√£y th·ª≠ l·∫°i sau √≠t ph√∫t nh√©!';
             });
        } else if (response.statusCode != 200) {
             setState(() {
                 aiAnalysis = data['analysis'] ?? "L·ªói server ${response.statusCode}. Kh√¥ng th·ªÉ ph√¢n t√≠ch AI.";
             });
        } else {
             final resultAnalysis = data['analysis'] ?? "Ph√¢n t√≠ch AI th·∫•t b·∫°i, nh∆∞ng b·∫°n ƒëang l√†m r·∫•t t·ªët!";
             setState(() {
                 aiAnalysis = resultAnalysis;
             });
        }
    } catch (e) {
        setState(() {
            aiAnalysis = "L·ªói m·∫°ng ho·∫∑c k·∫øt n·ªëi. H√£y th·ª≠ l·∫°i.";
        });
        debugPrint('AI Analysis Error: $e');
    }
    setState(() {
      isLoading = false;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            AutoText(
              "MOODDIARY ph√¢n t√≠ch s·ª± bi·∫øn ƒë·ªïi:",
              style: TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.bold,
                color: Colors.blue.shade800,
              ),
            ),
            if (isLoading)
              const SizedBox(
                width: 15,
                height: 15,
                child: CircularProgressIndicator(strokeWidth: 2),
              ),
          ],
        ),
        const SizedBox(height: 8),
        Container(
          width: double.infinity,
          padding: const EdgeInsets.all(12),
          decoration: BoxDecoration(
            color: Colors.blue.shade50,
            borderRadius: BorderRadius.circular(8),
            border: Border.all(color: Colors.blue.shade200),
          ),
          child: AutoText(
            aiAnalysis,
            style: TextStyle(fontSize: 14, color: Colors.blue.shade900, height: 1.5),
          ),
        ),
        const SizedBox(height: 10),
        Center(
          child: ElevatedButton.icon(
            onPressed: isLoading ? null : _fetchAIAnalysis,
            icon: const Icon(Icons.psychology_alt),
            label: AutoText(isLoading ? "ƒêang ph√¢n t√≠ch..." : "Ph√¢n T√≠ch T·ª´ MOODDIARY"),
            style: ElevatedButton.styleFrom(
              foregroundColor: Colors.white,
              backgroundColor: Colors.blue.shade600,
              padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 10),
              shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
            ),
          ),
        ),
      ],
    );
  }
}