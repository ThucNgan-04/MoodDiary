// File: widgets/thong_ke_tuan.dart
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:moods_diary/utils/constants.dart';
import 'package:moods_diary/widgets/auto_text.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../utils/date_ultils.dart'; // Import ƒë·ªÉ d√πng WeeklyData

// WIDGET 1: ThongKeWeeklySummary

class ThongKeWeeklySummary extends StatelessWidget {
  final WeeklyData weeklyData;
  final Map<String, dynamic> weekMoods; // {day: 'emotion'}
  final Function(String) isPositiveMood;

  // ƒë·ªÉ so s√°nh v·ªõi tu·∫ßn tr∆∞·ªõc
  final List<WeeklyData>? allWeeks;
  final Map<int, Map<String, dynamic>>? allWeekMoods;

  const ThongKeWeeklySummary({
    super.key,
    required this.weeklyData,
    required this.weekMoods,
    required this.isPositiveMood,
    this.allWeeks,
    this.allWeekMoods,
  });

  // -------------------- PH√ÇN T√çCH TU·∫¶N HI·ªÜN T·∫†I --------------------
  Map<String, int> _analyzeWeek() {
    int posCount = 0;
    int negCount = 0;
    int neuCount = 0;

    for (int day in weeklyData.days) {
      final emotion = weekMoods[day.toString()];
      if (emotion != null && emotion is String) {
        if (isPositiveMood(emotion)) {
          posCount++;
        } else {
          negCount++;
        }
      } else {
        neuCount++;
      }
    }

    return {'pos': posCount, 'neg': negCount, 'neu': neuCount};
  }

  // -------------------- T√åM TU·∫¶N TR∆Ø·ªöC G·∫¶N NH·∫§T C√ì D·ªÆ LI·ªÜU --------------------
  WeeklyData? _findPreviousWeekWithData() {
    if (allWeeks == null || allWeekMoods == null) return null;
    final currentWeekNum = weeklyData.weekNumber;

    for (int i = currentWeekNum - 1; i >= 1; i--) {
      // find week object with weekNumber == i (if any)
      final matches = allWeeks!.where((w) => w.weekNumber == i).toList();
      if (matches.isEmpty) continue;
      final prev = matches.first;

      // get moods map for that week (may be null if key absent)
      final Map<String, dynamic>? moods = allWeekMoods![i];
      if (moods != null && moods.isNotEmpty) {
        // at least one recorded day exists ‚Äî return this previous week
        return prev;
      }
    }
    return null;
  }

  // -------------------- PH√ÇN T√çCH TU·∫¶N C·ª§ TH·ªÇ (CHO TU·∫¶N TR∆Ø·ªöC) --------------------
  Map<String, int> _analyzeCustomWeek(WeeklyData week, Map<String, dynamic> moods) {
    int posCount = 0;
    int negCount = 0;
    int neuCount = 0;

    for (int day in week.days) {
      final emotion = moods[day.toString()];
      if (emotion != null && emotion is String) {
        if (isPositiveMood(emotion)) {
          posCount++;
        } else {
          negCount++;
        }
      } else {
        neuCount++;
      }
    }
    return {'pos': posCount, 'neg': negCount, 'neu': neuCount};
  }

  // -------------------- SO S√ÅNH 2 TU·∫¶N --------------------
  Map<String, int> _compareWithPreviousWeek(WeeklyData prevWeek) {
    final prevMoods = allWeekMoods![prevWeek.weekNumber] ?? {};
    final prevStats = _analyzeCustomWeek(prevWeek, prevMoods);
    final currStats = _analyzeWeek();

    return {
      'posDiff': currStats['pos']! - prevStats['pos']!,
      'negDiff': currStats['neg']! - prevStats['neg']!,
      'neuDiff': currStats['neu']! - prevStats['neu']!,
    };
  }

  // -------------------- T·∫†O NH·∫¨N X√âT CHUY√äN S√ÇU (NO-AI) --------------------
  /// Sinh ƒëo·∫°n nh·∫≠n x√©t ng·∫Øn (d·ª±a tr√™n s·ªë tuy·ªát ƒë·ªëi v√† ph·∫ßn trƒÉm)
  String _generateShiftAnalysis(Map<String, int> prevStats, Map<String, int> currStats) {
    final prevTotal = (prevStats['pos'] ?? 0) + (prevStats['neg'] ?? 0) + (prevStats['neu'] ?? 0);
    final currTotal = (currStats['pos'] ?? 0) + (currStats['neg'] ?? 0) + (currStats['neu'] ?? 0);

    String safePercentChange(int prev, int curr) {
      if (prev == 0) {
        if (curr == 0) return "0%";
        return "t·ª´ 0 l√™n ${((curr) * 100).toString()}% (kh√¥ng c√≥ d·ªØ li·ªáu tr∆∞·ªõc ƒë√≥)";
      }
      final change = ((curr - prev) / prev) * 100;
      return "${change >= 0 ? '+' : ''}${change.toStringAsFixed(0)}%";
    }

    final posPrev = prevStats['pos'] ?? 0;
    final negPrev = prevStats['neg'] ?? 0;
    final neuPrev = prevStats['neu'] ?? 0;

    final posCurr = currStats['pos'] ?? 0;
    final negCurr = currStats['neg'] ?? 0;
    final neuCurr = currStats['neu'] ?? 0;

    final posChange = posCurr - posPrev;
    final negChange = negCurr - negPrev;
    final neuChange = neuCurr - neuPrev;

    final posPct = safePercentChange(posPrev, posCurr);
    final negPct = safePercentChange(negPrev, negCurr);
    final neuPct = safePercentChange(neuPrev, neuCurr);

    // Build readable summary
    final buffer = StringBuffer();
    buffer.writeln("üîé T√≥m t·∫Øt d·ªãch chuy·ªÉn c·∫£m x√∫c so v·ªõi tu·∫ßn tr∆∞·ªõc:");
    buffer.writeln("- T√≠ch c·ª±c: ${posChange >= 0 ? "tƒÉng $posChange ng√†y" : "gi·∫£m ${posChange.abs()} ng√†y"} ($posPct).");
    buffer.writeln("- Ti√™u c·ª±c: ${negChange >= 0 ? "tƒÉng $negChange ng√†y" : "gi·∫£m ${negChange.abs()} ng√†y"} ($negPct).");
    buffer.writeln("- Trung t√≠nh/Ch∆∞a ghi: ${neuChange >= 0 ? "tƒÉng $neuChange ng√†y" : "gi·∫£m ${neuChange.abs()} ng√†y"} ($neuPct).");

    // M·ªôt s·ªë nh·∫≠n x√©t b·ªï sung d·ª±a tr√™n xu h∆∞·ªõng
    // if (negChange < 0 && posChange > 0) {
    //   buffer.writeln("\nüü¢ Xu h∆∞·ªõng t√≠ch c·ª±c: S·ªë ng√†y ti√™u c·ª±c gi·∫£m trong khi s·ªë ng√†y t√≠ch c·ª±c tƒÉng ‚Äî d·∫•u hi·ªáu ph·ª•c h·ªìi c·∫£m x√∫c.");
    // } else if (negChange > 0 && posChange < 0) {
    //   buffer.writeln("\nüî¥ C·∫ßn ch√∫ √Ω: TƒÉng ng√†y ti√™u c·ª±c v√† gi·∫£m ng√†y t√≠ch c·ª±c ‚Äî ng∆∞·ªùi d√πng c√≥ th·ªÉ tr·∫£i qua tu·∫ßn cƒÉng th·∫≥ng.");
    // } else if (negChange == 0 && posChange == 0 && neuChange == 0) {
    //   buffer.writeln("\n‚öñÔ∏è ·ªîn ƒë·ªãnh: Kh√¥ng thay ƒë·ªïi ƒë√°ng k·ªÉ gi·ªØa hai tu·∫ßn.");
    // } else {
    //   buffer.writeln("\n‚ÑπÔ∏è C√≥ bi·∫øn ƒë·ªông nh·∫π; c√¢n nh·∫Øc xem x√©t nh·∫≠t k√Ω chi ti·∫øt ƒë·ªÉ hi·ªÉu nguy√™n nh√¢n c·ª• th·ªÉ (c√¥ng vi·ªác, gi·∫•c ng·ªß, t∆∞∆°ng t√°c...).");
    // }
    buffer.writeln("\nNh·∫•n n√∫t 'Nh·∫≠n Ph√¢n T√≠ch Chuy√™n S√¢u T·ª´ MOODDIARY' ƒë·ªÉ c√≥ ƒë√°nh gi√° t√¢m l√Ω chuy√™n nghi·ªáp.");
    // T·ªëi ƒëa kho·∫£ng 4-6 c√¢u ‚Äî g·ªçn v√† tr·ª±c ti·∫øp
    return buffer.toString();
  }

  // -------------------- √î HI·ªÇN TH·ªä SO S√ÅNH --------------------
  Widget _buildComparisonRow(String label, int diff) {
    String text;
    Color color;
    if (diff > 0) {
      text = "TƒÉng $diff ng√†y";
      color = Colors.green.shade600;
    } else if (diff < 0) {
      text = "Gi·∫£m ${diff.abs()} ng√†y";
      color = Colors.red.shade600;
    } else {
      text = "Kh√¥ng ƒë·ªïi";
      color = Colors.grey.shade600;
    }

    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 2),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          AutoText(label, style: const TextStyle(fontSize: 15, fontWeight: FontWeight.w500)),
          AutoText(text, style: TextStyle(fontSize: 15, color: color, fontWeight: FontWeight.bold)),
        ],
      ),
    );
  }

  // H√†m t·∫°o √¥ ti√™u ƒë·ªÅ
  Widget _buildHeaderCell(String text, {double flex = 1}) {
    return Container(
      padding: const EdgeInsets.symmetric(vertical: 12.0, horizontal: 4.0),
      alignment: Alignment.center,
      decoration: BoxDecoration(
        color: Colors.pink.shade50,
        border: Border.all(color: Colors.pink.shade100),
      ),
      child: AutoText(
        text,
        textAlign: TextAlign.center,
        style: TextStyle(
          fontWeight: FontWeight.bold,
          fontSize: 14,
          color: Colors.pink.shade800,
        ),
      ),
    );
  }

  // H√†m t·∫°o √¥ d·ªØ li·ªáu
  Widget _buildDataCell(String text, {Color? color, bool isBold = false}) {
    return Container(
      padding: const EdgeInsets.symmetric(vertical: 10.0, horizontal: 4.0),
      alignment: Alignment.center,
      decoration: BoxDecoration(
        border: Border.all(color: Colors.grey.shade300),
      ),
      child: AutoText(
        text,
        textAlign: TextAlign.center,
        style: TextStyle(
          fontSize: 16,
          color: color ?? Colors.black87,
          fontWeight: isBold ? FontWeight.bold : FontWeight.normal,
        ),
      ),
    );
  }

  // H√†m t·∫°o thanh ti·∫øn tr√¨nh
  Widget _buildMoodBar(String label, int count, int total, Color color) {
    double percent = total > 0 ? count / total : 0;
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 4.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          AutoText(
            '$label: $count ng√†y (${(percent * 100).toStringAsFixed(0)}%)',
            style: TextStyle(fontSize: 14, fontWeight: FontWeight.w500, color: color),
          ),
          const SizedBox(height: 4),
          LinearProgressIndicator(
            value: percent,
            backgroundColor: Colors.grey.shade200,
            color: color,
            minHeight: 8,
          ),
        ],
      ),
    );
  }

  // -------------------- BUILD --------------------
  @override
  Widget build(BuildContext context) {
    final analysis = _analyzeWeek();
    final pos = analysis['pos']!;
    final neg = analysis['neg']!;
    final neu = analysis['neu']!;
    final total = pos + neg + neu;

    final prevWeek = _findPreviousWeekWithData();
    final diff = prevWeek != null ? _compareWithPreviousWeek(prevWeek) : null;

    // If previous week found, build previous stats for detailed analysis
    Map<String, int>? prevStats;
    String? deepAnalysis;
    if (prevWeek != null && allWeekMoods != null) {
      final prevMoods = allWeekMoods![prevWeek.weekNumber] ?? {};
      prevStats = _analyzeCustomWeek(prevWeek, prevMoods);
      deepAnalysis = _generateShiftAnalysis(prevStats, analysis);
    }

    return Container(
      width: 600,
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(color: Colors.grey.withOpacity(0.1), blurRadius: 10, offset: const Offset(0, 4))
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          AutoText(
            "T√≥m t·∫Øt Tu·∫ßn ${weeklyData.weekNumber} (${weeklyData.dateRange})",
            style: const TextStyle(
              fontSize: 18,
              fontWeight: FontWeight.bold,
              color: Color.fromARGB(255, 114, 53, 102),
            ),
          ),
          const Divider(height: 20, color: Colors.grey),

          // B·∫£ng chi ti·∫øt
          Table(
            columnWidths: const {
              0: FlexColumnWidth(1.5),
              1: FlexColumnWidth(1),
            },
            defaultVerticalAlignment: TableCellVerticalAlignment.middle,
            children: [
              // H√†ng Ti√™u ƒë·ªÅ
              TableRow(
                children: [
                  _buildHeaderCell("Tr·∫°ng th√°i", flex: 1.5),
                  _buildHeaderCell("S·ªë ng√†y"),
                ],
              ),
              // H√†ng D·ªØ li·ªáu T√≠ch c·ª±c
              TableRow(
                children: [
                  _buildDataCell("T√≠ch c·ª±c (Pos) üåü", isBold: true),
                  _buildDataCell("$pos", color: Colors.green.shade600, isBold: true),
                ],
              ),
              // H√†ng D·ªØ li·ªáu Ti√™u c·ª±c
              TableRow(
                children: [
                  _buildDataCell("Ti√™u c·ª±c (Neg) ‚ö†Ô∏è", isBold: true),
                  _buildDataCell("$neg", color: Colors.red.shade600, isBold: true),
                ],
              ),
              // H√†ng D·ªØ li·ªáu Trung t√≠nh
              TableRow(
                children: [
                  _buildDataCell("Trung t√≠nh/Ch∆∞a ghi üòê", isBold: true),
                  _buildDataCell("$neu", color: Colors.grey.shade600, isBold: true),
                ],
              ),
              // H√†ng T·ªïng c·ªông
              TableRow(
                children: [
                  _buildHeaderCell("T·ªîNG NG√ÄY", flex: 1.5),
                  _buildHeaderCell("$total"),
                ],
              ),
            ],
          ),
          const SizedBox(height: 20),

          AutoText(
            "Ph√¢n b·ªë C·∫£m x√∫c:",
            style: TextStyle(
              fontSize: 16,
              fontWeight: FontWeight.bold,
              color: Colors.grey.shade700,
            ),
          ),
          const SizedBox(height: 8),

          // Thanh ti·∫øn tr√¨nh
          _buildMoodBar("T√≠ch c·ª±c", pos, total, Colors.green),
          _buildMoodBar("Ti√™u c·ª±c", neg, total, Colors.red),
          _buildMoodBar("Trung t√≠nh/Ch∆∞a ghi", neu, total, Colors.blueGrey),

          if (prevWeek != null) ...[
            const SizedBox(height: 24),
            AutoText(
              "üìä So s√°nh v·ªõi Tu·∫ßn ${prevWeek.weekNumber} (${prevWeek.dateRange}):",
              style: TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.bold,
                color: Colors.pink.shade800,
              ),
            ),
            const SizedBox(height: 8),
            _buildComparisonRow("T√≠ch c·ª±c üåü", diff!['posDiff']!),
            _buildComparisonRow("Ti√™u c·ª±c ‚ö†Ô∏è", diff['negDiff']!),
            _buildComparisonRow("Trung t√≠nh üòê", diff['neuDiff']!),
            const SizedBox(height: 20),
            //PH√ÇN T√çCH AI
            ThongKeWeeklyAIAnalysis(
              currStats: analysis, // D·ªØ li·ªáu tu·∫ßn hi·ªán t·∫°i
              prevStats: prevStats!, // D·ªØ li·ªáu tu·∫ßn tr∆∞·ªõc (ƒë√£ ki·ªÉm tra null)
              currDateRange: weeklyData.dateRange,
              prevDateRange: prevWeek.dateRange,
            ),
          ],
        ],
      ),
    );
  }
}

class ThongKeWeeklyAIAnalysis extends StatefulWidget {
  final Map<String, int> currStats; 
  final Map<String, int> prevStats;
  final String currDateRange;
  final String prevDateRange;

  const ThongKeWeeklyAIAnalysis({
    super.key,
    required this.currStats,
    required this.prevStats,
    required this.currDateRange,
    required this.prevDateRange,
  });

  @override
  State<ThongKeWeeklyAIAnalysis> createState() => _ThongKeWeeklyAIAnalysisState();
}

class _ThongKeWeeklyAIAnalysisState extends State<ThongKeWeeklyAIAnalysis> {
  String aiAnalysis = "B·∫•m v√†o n√∫t b√™n d∆∞·ªõi ƒë·ªÉ Mood Diary ph√¢n t√≠ch chuy√™n s√¢u.";
  bool isLoading = false;
  // Gi·∫£ ƒë·ªãnh API endpoint m·ªõi
  final String apiEndpoint = "${Constants.baseUrl}/ai/mood-shift-analysis"; 
  final String tokenKey = Constants.tokenKey;

  // H√†m g·ªçi API ƒë·∫øn Server Laravel
  Future<void> _fetchAIAnalysis() async {
    if (isLoading) return;
    setState(() {
      isLoading = true;
      aiAnalysis = "Mood Diary ƒëang ph√¢n t√≠ch d·ªØ li·ªáu tu·∫ßn n√†y...";
    });
    
    // Chu·∫©n b·ªã payload
    final payload = {
      'curr_stats': widget.currStats,
      'prev_stats': widget.prevStats,
      'curr_date_range': widget.currDateRange,
      'prev_date_range': widget.prevDateRange,
    };
    debugPrint('DEBUG AI WEEKLY PAYLOAD: ${json.encode(payload)}');
    
    // L·∫•y token
    final prefs = await SharedPreferences.getInstance();
    final token = prefs.getString(tokenKey);
    debugPrint('DEBUG: Token Flutter: $token');

    if (token == null) {
        setState(() {
            aiAnalysis = "L·ªói: Kh√¥ng t√¨m th·∫•y Token ng∆∞·ªùi d√πng.";
            isLoading = false;
        });
        return;
    }
    
    try {
        final response = await http.post(
            Uri.parse(apiEndpoint), 
            headers: {
                'Content-Type': 'application/json',
                'Authorization': 'Bearer $token',
            },
            body: json.encode(payload),
        );
        
        final data = json.decode(utf8.decode(response.bodyBytes));
        
        // Ki·ªÉm tra l·ªói 429 ho·∫∑c l·ªói chung
        if (response.statusCode == 429) {
             setState(() {
                aiAnalysis = data['analysis'] ?? 'AI ƒëang t·∫°m ngh·ªâ ƒë·ªÉ n·∫°p nƒÉng l∆∞·ª£ng üòÖ. H√£y th·ª≠ l·∫°i sau √≠t ph√∫t nh√©!';
            });
        } else if (response.statusCode != 200) {
            // L·ªói Server/L·ªói API Gemini t·ª´ Server
             setState(() {
                aiAnalysis = data['analysis'] ?? "L·ªói server ${response.statusCode}. Kh√¥ng th·ªÉ ph√¢n t√≠ch AI.";
            });
        } else {
            // Th√†nh c√¥ng
            final resultAnalysis = data['analysis'] ?? "Ph√¢n t√≠ch AI th·∫•t b·∫°i, nh∆∞ng b·∫°n ƒëang l√†m r·∫•t t·ªët!";
            setState(() {
                aiAnalysis = resultAnalysis;
            });
        }
    } catch (e) {
        // L·ªói m·∫°ng ho·∫∑c exception
        setState(() {
            aiAnalysis = "L·ªói m·∫°ng ho·∫∑c k·∫øt n·ªëi. H√£y th·ª≠ l·∫°i.";
        });
        debugPrint('AI Analysis Error: $e');
    }
    
    setState(() {
      isLoading = false;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            AutoText(
              "MOODDIARY ph√¢n t√≠ch s·ª± bi·∫øn ƒë·ªïi:",
              style: TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.bold,
                color: Colors.blue.shade800,
              ),
            ),
            if (isLoading)
              const SizedBox(
                width: 15,
                height: 15,
                child: CircularProgressIndicator(strokeWidth: 2),
              ),
          ],
        ),
        const SizedBox(height: 8),
        Container(
          width: double.infinity,
          padding: const EdgeInsets.all(12),
          decoration: BoxDecoration(
            color: Colors.blue.shade50,
            borderRadius: BorderRadius.circular(8),
            border: Border.all(color: Colors.blue.shade200),
          ),
          child: AutoText(
            aiAnalysis,
            style: TextStyle(fontSize: 14, color: Colors.blue.shade900, height: 1.5),
          ),
        ),
        const SizedBox(height: 10),
        Center(
          child: ElevatedButton.icon(
            onPressed: isLoading ? null : _fetchAIAnalysis,
            icon: const Icon(Icons.psychology_alt),
            label: AutoText(isLoading ? "ƒêang ph√¢n t√≠ch..." : "Ph√¢n T√≠ch T·ª´ MOODDIARY"),
            style: ElevatedButton.styleFrom(
              foregroundColor: Colors.white,
              backgroundColor: Colors.blue.shade600,
              padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 10),
              shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
            ),
          ),
        ),
      ],
    );
  }
}